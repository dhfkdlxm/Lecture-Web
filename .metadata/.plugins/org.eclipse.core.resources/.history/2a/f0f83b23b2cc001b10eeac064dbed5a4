<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">
	var aaa = function() {
		alert('익명함수 aaa() 함수 호출 ....')
	}
	function aaa() {
		alert('선언적 aaa() 함수 호출 ....')

	}
	//선언적 함수 << 익명함수
	// 선언적 함수와 익명 함수 동시 선언시 익명함수의 우선순위가 더높음!
	aaa()

	testFunction()//호이스팅 발생
	function testFunction() {
		alert('testFunction() 호출 ...')
	}

	function testFunction01(data) {
		alert('data : ' + data)
	}

	function testFunction02(a, b) {
		alert(`a : ${ a }, b : ${ b } `)
	}
	//오버로딩 지원되지 않음! 
	// 덮어 쓰기가 지원됨!
	testFunction02('A', 10)
	testFunction01(123)

	function add(a, b) {
		return a + b
	}
	let sum = add(10, 20)
	alert('총합 : ' + sum)
	//alert(`총합 : ${ sum }`)

	var func = function test() {
		alert('test()....')
	}

	// test() 함수를 변수에 넣어주게되면, "test()"로 함수 호출이 되지 않음
	//(어떤 함수를 변수로 담으면, 함수의 이름이 의미가 없음) → 익명함수
	// 따라서 호출할때 그 변수로 호출해야함
	//이렇게 
	func()

	var func = function() {
		alert('이것이 익명함수다.')
	}
	//익명함수의 특징 : 함수 호이스팅이 발생되지 않음!!!!
	//호이스팅이 발생하지 않기 때문에 일반적으로 많이 사용하는 편임!

	//콜백함수? : 매개변수로 함수를 받아서 그 함수를 실행하게 해주는 함수!
	function callbackFunc(f) {
		f()
	}
	function getSum(a, b){
		let s = 0;
		while(a <= b){
			s+= a++;
		}
		return s;
	}
	function printSum(a,b){
		
	}
	
		
		
	callbackFunc(function() {
		alert('익명함수 호출...')
	})
	//콜백함수(익명함수(){}) 형태로 자주사용함!
	callbackFunc(func)
</script>
</head>
<body>
</body>
</html>