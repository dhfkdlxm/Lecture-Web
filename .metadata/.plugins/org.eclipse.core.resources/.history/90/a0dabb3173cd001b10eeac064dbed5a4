<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<script type="text/javascript">
	function Person(name, phone, addr) {
		this.name = name
		this.phone = phone
		this.addr = addr
	}

	Person.prototype.hobby = '영화감상'
	Person.prototype.info = function() {
		let msg = ''
		for ( let key in this) {
			if (key != 'info')
				msg += key + ' : ' + this[key] + '\n'
		}
		alert(msg)
	}
	//의사를 만들건데, 의사도 사람임, 기본적인 사람 객체(Person) + 의사정보(정형, 외과등등)
	function Doctor(name, phone, addr, major) {
		/* 		this.name = name
		 this.phone = phone
		 this.addr = addr
		 this.major = major */

		// 이코드를 사용한다고 해서 상속관계가 아니라, person객체의 생성자를 사용하는것임
		//(d instanceof Person) == false임!
		//this.super = Person
		//this.super(name,phone, addr)
		//Person 객체를 호출 시켜라!!!! Person.call(this←Doctor의 this라고 의미함)
		//Person.call(this, name, phone, addr)
		//Person.call(this,...arguments) 사용가능
		Person.apply(this, arguments)
		this.major = major
	}

	//Doctor.prototype = Person.prototype // Doctor의 프로토 타입을 Person의 프로토 타입으로 바꿔줌!
	//Doctor.prototype = Object.create(Person.prototype) 유사한 방식!
	let d = new Doctor('나최고', '010-3333-4444', '서울시 서초구 잘고쳐병원', '신경외과')
	console.log(d)

	//상속관계를 표현해보고싶음! Person 자체가 name, phone, addr를 가지고 있으니까 말이지!
	//Person이 가지고 있는걸 가져다 써보고싶음(상속 사용)
	console.log('d instanceof Doctor :' + (d instanceof Doctor)) //doctor가 Doctor객체의 일부분이야? → true
	console.log('d instanceof Person : ' + (d instanceof Person)) //doctor가 Person객체의 일부분이야? → false

	d.info()

	/*
	let p = new Person('홍길동', '010-4225-3870', ' 경기도광명시')
	 p.info()
	 console.log(p)*/
</script>
</head>
<body>

</body>
</html>